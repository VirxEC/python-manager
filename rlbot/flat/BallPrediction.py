# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BallPrediction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BallPrediction()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBallPrediction(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BallPrediction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # A list of places the ball will be at specific times in the future.
    # It is guaranteed to sorted so that time increases with each slice.
    # It is NOT guaranteed to have a consistent amount of time between slices.
    # BallPrediction
    def Slices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from rlbot.flat.PredictionSlice import PredictionSlice
            obj = PredictionSlice()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BallPrediction
    def SlicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BallPrediction
    def SlicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def BallPredictionStart(builder):
    builder.StartObject(1)

def Start(builder):
    BallPredictionStart(builder)

def BallPredictionAddSlices(builder, slices):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(slices), 0)

def AddSlices(builder, slices):
    BallPredictionAddSlices(builder, slices)

def BallPredictionStartSlicesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSlicesVector(builder, numElems):
    return BallPredictionStartSlicesVector(builder, numElems)

def BallPredictionEnd(builder):
    return builder.EndObject()

def End(builder):
    return BallPredictionEnd(builder)

import rlbot.flat.PredictionSlice
try:
    from typing import List
except:
    pass

class BallPredictionT(object):

    # BallPredictionT
    def __init__(self):
        self.slices = None  # type: List[rlbot.flat.PredictionSlice.PredictionSliceT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ballPrediction = BallPrediction()
        ballPrediction.Init(buf, pos)
        return cls.InitFromObj(ballPrediction)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ballPrediction):
        x = BallPredictionT()
        x._UnPack(ballPrediction)
        return x

    # BallPredictionT
    def _UnPack(self, ballPrediction):
        if ballPrediction is None:
            return
        if not ballPrediction.SlicesIsNone():
            self.slices = []
            for i in range(ballPrediction.SlicesLength()):
                if ballPrediction.Slices(i) is None:
                    self.slices.append(None)
                else:
                    predictionSlice_ = rlbot.flat.PredictionSlice.PredictionSliceT.InitFromObj(ballPrediction.Slices(i))
                    self.slices.append(predictionSlice_)

    # BallPredictionT
    def Pack(self, builder):
        if self.slices is not None:
            sliceslist = []
            for i in range(len(self.slices)):
                sliceslist.append(self.slices[i].Pack(builder))
            BallPredictionStartSlicesVector(builder, len(self.slices))
            for i in reversed(range(len(self.slices))):
                builder.PrependUOffsetTRelative(sliceslist[i])
            slices = builder.EndVector()
        BallPredictionStart(builder)
        if self.slices is not None:
            BallPredictionAddSlices(builder, slices)
        ballPrediction = BallPredictionEnd(builder)
        return ballPrediction
