# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BoostPadState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoostPadState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBoostPadState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BoostPadState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # True if the boost can be picked up
    # BoostPadState
    def IsActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
    # BoostPadState
    def Timer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def BoostPadStateStart(builder):
    builder.StartObject(2)

def Start(builder):
    BoostPadStateStart(builder)

def BoostPadStateAddIsActive(builder, isActive):
    builder.PrependBoolSlot(0, isActive, 0)

def AddIsActive(builder, isActive):
    BoostPadStateAddIsActive(builder, isActive)

def BoostPadStateAddTimer(builder, timer):
    builder.PrependFloat32Slot(1, timer, 0.0)

def AddTimer(builder, timer):
    BoostPadStateAddTimer(builder, timer)

def BoostPadStateEnd(builder):
    return builder.EndObject()

def End(builder):
    return BoostPadStateEnd(builder)


class BoostPadStateT(object):

    # BoostPadStateT
    def __init__(self):
        self.isActive = False  # type: bool
        self.timer = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        boostPadState = BoostPadState()
        boostPadState.Init(buf, pos)
        return cls.InitFromObj(boostPadState)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, boostPadState):
        x = BoostPadStateT()
        x._UnPack(boostPadState)
        return x

    # BoostPadStateT
    def _UnPack(self, boostPadState):
        if boostPadState is None:
            return
        self.isActive = boostPadState.IsActive()
        self.timer = boostPadState.Timer()

    # BoostPadStateT
    def Pack(self, builder):
        BoostPadStateStart(builder)
        BoostPadStateAddIsActive(builder, self.isActive)
        BoostPadStateAddTimer(builder, self.timer)
        boostPadState = BoostPadStateEnd(builder)
        return boostPadState
