# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A console command which we will try to execute inside Rocket League.
# See https://github.com/RLBot/RLBot/wiki/Console-Commands for a list of known commands.
class ConsoleCommand(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConsoleCommand()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConsoleCommand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConsoleCommand
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConsoleCommand
    def Command(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ConsoleCommandStart(builder):
    builder.StartObject(1)

def Start(builder):
    ConsoleCommandStart(builder)

def ConsoleCommandAddCommand(builder, command):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(command), 0)

def AddCommand(builder, command):
    ConsoleCommandAddCommand(builder, command)

def ConsoleCommandEnd(builder):
    return builder.EndObject()

def End(builder):
    return ConsoleCommandEnd(builder)


class ConsoleCommandT(object):

    # ConsoleCommandT
    def __init__(self):
        self.command = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        consoleCommand = ConsoleCommand()
        consoleCommand.Init(buf, pos)
        return cls.InitFromObj(consoleCommand)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, consoleCommand):
        x = ConsoleCommandT()
        x._UnPack(consoleCommand)
        return x

    # ConsoleCommandT
    def _UnPack(self, consoleCommand):
        if consoleCommand is None:
            return
        self.command = consoleCommand.Command()

    # ConsoleCommandT
    def Pack(self, builder):
        if self.command is not None:
            command = builder.CreateString(self.command)
        ConsoleCommandStart(builder)
        if self.command is not None:
            ConsoleCommandAddCommand(builder, command)
        consoleCommand = ConsoleCommandEnd(builder)
        return consoleCommand
