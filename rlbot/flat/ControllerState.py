# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ControllerState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ControllerState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsControllerState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ControllerState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # -1 for full reverse, 1 for full forward
    # ControllerState
    def Throttle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # -1 for full left, 1 for full right
    # ControllerState
    def Steer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # -1 for nose down, 1 for nose up
    # ControllerState
    def Pitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # -1 for full left, 1 for full right
    # ControllerState
    def Yaw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # -1 for roll left, 1 for roll right
    # ControllerState
    def Roll(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # true if you want to press the jump button
    # ControllerState
    def Jump(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # true if you want to press the boost button
    # ControllerState
    def Boost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # true if you want to press the handbrake button
    # ControllerState
    def Handbrake(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # true if you want to press the 'use item' button, used in rumble etc.
    # ControllerState
    def UseItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ControllerStateStart(builder):
    builder.StartObject(9)

def Start(builder):
    ControllerStateStart(builder)

def ControllerStateAddThrottle(builder, throttle):
    builder.PrependFloat32Slot(0, throttle, 0.0)

def AddThrottle(builder, throttle):
    ControllerStateAddThrottle(builder, throttle)

def ControllerStateAddSteer(builder, steer):
    builder.PrependFloat32Slot(1, steer, 0.0)

def AddSteer(builder, steer):
    ControllerStateAddSteer(builder, steer)

def ControllerStateAddPitch(builder, pitch):
    builder.PrependFloat32Slot(2, pitch, 0.0)

def AddPitch(builder, pitch):
    ControllerStateAddPitch(builder, pitch)

def ControllerStateAddYaw(builder, yaw):
    builder.PrependFloat32Slot(3, yaw, 0.0)

def AddYaw(builder, yaw):
    ControllerStateAddYaw(builder, yaw)

def ControllerStateAddRoll(builder, roll):
    builder.PrependFloat32Slot(4, roll, 0.0)

def AddRoll(builder, roll):
    ControllerStateAddRoll(builder, roll)

def ControllerStateAddJump(builder, jump):
    builder.PrependBoolSlot(5, jump, 0)

def AddJump(builder, jump):
    ControllerStateAddJump(builder, jump)

def ControllerStateAddBoost(builder, boost):
    builder.PrependBoolSlot(6, boost, 0)

def AddBoost(builder, boost):
    ControllerStateAddBoost(builder, boost)

def ControllerStateAddHandbrake(builder, handbrake):
    builder.PrependBoolSlot(7, handbrake, 0)

def AddHandbrake(builder, handbrake):
    ControllerStateAddHandbrake(builder, handbrake)

def ControllerStateAddUseItem(builder, useItem):
    builder.PrependBoolSlot(8, useItem, 0)

def AddUseItem(builder, useItem):
    ControllerStateAddUseItem(builder, useItem)

def ControllerStateEnd(builder):
    return builder.EndObject()

def End(builder):
    return ControllerStateEnd(builder)


class ControllerStateT(object):

    # ControllerStateT
    def __init__(self):
        self.throttle = 0.0  # type: float
        self.steer = 0.0  # type: float
        self.pitch = 0.0  # type: float
        self.yaw = 0.0  # type: float
        self.roll = 0.0  # type: float
        self.jump = False  # type: bool
        self.boost = False  # type: bool
        self.handbrake = False  # type: bool
        self.useItem = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        controllerState = ControllerState()
        controllerState.Init(buf, pos)
        return cls.InitFromObj(controllerState)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, controllerState):
        x = ControllerStateT()
        x._UnPack(controllerState)
        return x

    # ControllerStateT
    def _UnPack(self, controllerState):
        if controllerState is None:
            return
        self.throttle = controllerState.Throttle()
        self.steer = controllerState.Steer()
        self.pitch = controllerState.Pitch()
        self.yaw = controllerState.Yaw()
        self.roll = controllerState.Roll()
        self.jump = controllerState.Jump()
        self.boost = controllerState.Boost()
        self.handbrake = controllerState.Handbrake()
        self.useItem = controllerState.UseItem()

    # ControllerStateT
    def Pack(self, builder):
        ControllerStateStart(builder)
        ControllerStateAddThrottle(builder, self.throttle)
        ControllerStateAddSteer(builder, self.steer)
        ControllerStateAddPitch(builder, self.pitch)
        ControllerStateAddYaw(builder, self.yaw)
        ControllerStateAddRoll(builder, self.roll)
        ControllerStateAddJump(builder, self.jump)
        ControllerStateAddBoost(builder, self.boost)
        ControllerStateAddHandbrake(builder, self.handbrake)
        ControllerStateAddUseItem(builder, self.useItem)
        controllerState = ControllerStateEnd(builder)
        return controllerState
