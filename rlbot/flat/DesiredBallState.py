# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DesiredBallState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DesiredBallState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDesiredBallState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DesiredBallState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DesiredBallState
    def Physics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rlbot.flat.DesiredPhysics import DesiredPhysics
            obj = DesiredPhysics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DesiredBallStateStart(builder):
    builder.StartObject(1)

def Start(builder):
    DesiredBallStateStart(builder)

def DesiredBallStateAddPhysics(builder, physics):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(physics), 0)

def AddPhysics(builder, physics):
    DesiredBallStateAddPhysics(builder, physics)

def DesiredBallStateEnd(builder):
    return builder.EndObject()

def End(builder):
    return DesiredBallStateEnd(builder)

import rlbot.flat.DesiredPhysics
try:
    from typing import Optional
except:
    pass

class DesiredBallStateT(object):

    # DesiredBallStateT
    def __init__(self):
        self.physics = None  # type: Optional[rlbot.flat.DesiredPhysics.DesiredPhysicsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        desiredBallState = DesiredBallState()
        desiredBallState.Init(buf, pos)
        return cls.InitFromObj(desiredBallState)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, desiredBallState):
        x = DesiredBallStateT()
        x._UnPack(desiredBallState)
        return x

    # DesiredBallStateT
    def _UnPack(self, desiredBallState):
        if desiredBallState is None:
            return
        if desiredBallState.Physics() is not None:
            self.physics = rlbot.flat.DesiredPhysics.DesiredPhysicsT.InitFromObj(desiredBallState.Physics())

    # DesiredBallStateT
    def Pack(self, builder):
        if self.physics is not None:
            physics = self.physics.Pack(builder)
        DesiredBallStateStart(builder)
        if self.physics is not None:
            DesiredBallStateAddPhysics(builder, physics)
        desiredBallState = DesiredBallStateEnd(builder)
        return desiredBallState
