# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DropshotTile(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DropshotTile()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDropshotTile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DropshotTile
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The amount of damage the tile has sustained.
    # DropshotTile
    def TileState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def DropshotTileStart(builder):
    builder.StartObject(1)

def Start(builder):
    DropshotTileStart(builder)

def DropshotTileAddTileState(builder, tileState):
    builder.PrependInt8Slot(0, tileState, 0)

def AddTileState(builder, tileState):
    DropshotTileAddTileState(builder, tileState)

def DropshotTileEnd(builder):
    return builder.EndObject()

def End(builder):
    return DropshotTileEnd(builder)


class DropshotTileT(object):

    # DropshotTileT
    def __init__(self):
        self.tileState = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dropshotTile = DropshotTile()
        dropshotTile.Init(buf, pos)
        return cls.InitFromObj(dropshotTile)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dropshotTile):
        x = DropshotTileT()
        x._UnPack(dropshotTile)
        return x

    # DropshotTileT
    def _UnPack(self, dropshotTile):
        if dropshotTile is None:
            return
        self.tileState = dropshotTile.TileState()

    # DropshotTileT
    def Pack(self, builder):
        DropshotTileStart(builder)
        DropshotTileAddTileState(builder, self.tileState)
        dropshotTile = DropshotTileEnd(builder)
        return dropshotTile
