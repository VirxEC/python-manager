# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GameMessageWrapper(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GameMessageWrapper()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGameMessageWrapper(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GameMessageWrapper
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GameMessageWrapper
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # GameMessageWrapper
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def GameMessageWrapperStart(builder):
    builder.StartObject(2)

def Start(builder):
    GameMessageWrapperStart(builder)

def GameMessageWrapperAddMessageType(builder, messageType):
    builder.PrependUint8Slot(0, messageType, 0)

def AddMessageType(builder, messageType):
    GameMessageWrapperAddMessageType(builder, messageType)

def GameMessageWrapperAddMessage(builder, message):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)

def AddMessage(builder, message):
    GameMessageWrapperAddMessage(builder, message)

def GameMessageWrapperEnd(builder):
    return builder.EndObject()

def End(builder):
    return GameMessageWrapperEnd(builder)

import rlbot.flat.GameMessage
import rlbot.flat.PlayerInputChange
import rlbot.flat.PlayerSpectate
import rlbot.flat.PlayerStatEvent
try:
    from typing import Union
except:
    pass

class GameMessageWrapperT(object):

    # GameMessageWrapperT
    def __init__(self):
        self.messageType = 0  # type: int
        self.message = None  # type: Union[None, rlbot.flat.PlayerStatEvent.PlayerStatEventT, rlbot.flat.PlayerSpectate.PlayerSpectateT, rlbot.flat.PlayerInputChange.PlayerInputChangeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gameMessageWrapper = GameMessageWrapper()
        gameMessageWrapper.Init(buf, pos)
        return cls.InitFromObj(gameMessageWrapper)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, gameMessageWrapper):
        x = GameMessageWrapperT()
        x._UnPack(gameMessageWrapper)
        return x

    # GameMessageWrapperT
    def _UnPack(self, gameMessageWrapper):
        if gameMessageWrapper is None:
            return
        self.messageType = gameMessageWrapper.MessageType()
        self.message = rlbot.flat.GameMessage.GameMessageCreator(self.messageType, gameMessageWrapper.Message())

    # GameMessageWrapperT
    def Pack(self, builder):
        if self.message is not None:
            message = self.message.Pack(builder)
        GameMessageWrapperStart(builder)
        GameMessageWrapperAddMessageType(builder, self.messageType)
        if self.message is not None:
            GameMessageWrapperAddMessage(builder, message)
        gameMessageWrapper = GameMessageWrapperEnd(builder)
        return gameMessageWrapper
