# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GameTickPacket(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GameTickPacket()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGameTickPacket(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GameTickPacket
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GameTickPacket
    def Players(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from rlbot.flat.PlayerInfo import PlayerInfo
            obj = PlayerInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameTickPacket
    def PlayersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameTickPacket
    def PlayersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # GameTickPacket
    def BoostPadStates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from rlbot.flat.BoostPadState import BoostPadState
            obj = BoostPadState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameTickPacket
    def BoostPadStatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameTickPacket
    def BoostPadStatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # GameTickPacket
    def Ball(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rlbot.flat.BallInfo import BallInfo
            obj = BallInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameTickPacket
    def GameInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rlbot.flat.GameInfo import GameInfo
            obj = GameInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameTickPacket
    def TileInformation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from rlbot.flat.DropshotTile import DropshotTile
            obj = DropshotTile()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameTickPacket
    def TileInformationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameTickPacket
    def TileInformationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # GameTickPacket
    def Teams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from rlbot.flat.TeamInfo import TeamInfo
            obj = TeamInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GameTickPacket
    def TeamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameTickPacket
    def TeamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def GameTickPacketStart(builder):
    builder.StartObject(6)

def Start(builder):
    GameTickPacketStart(builder)

def GameTickPacketAddPlayers(builder, players):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(players), 0)

def AddPlayers(builder, players):
    GameTickPacketAddPlayers(builder, players)

def GameTickPacketStartPlayersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPlayersVector(builder, numElems):
    return GameTickPacketStartPlayersVector(builder, numElems)

def GameTickPacketAddBoostPadStates(builder, boostPadStates):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(boostPadStates), 0)

def AddBoostPadStates(builder, boostPadStates):
    GameTickPacketAddBoostPadStates(builder, boostPadStates)

def GameTickPacketStartBoostPadStatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBoostPadStatesVector(builder, numElems):
    return GameTickPacketStartBoostPadStatesVector(builder, numElems)

def GameTickPacketAddBall(builder, ball):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ball), 0)

def AddBall(builder, ball):
    GameTickPacketAddBall(builder, ball)

def GameTickPacketAddGameInfo(builder, gameInfo):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(gameInfo), 0)

def AddGameInfo(builder, gameInfo):
    GameTickPacketAddGameInfo(builder, gameInfo)

def GameTickPacketAddTileInformation(builder, tileInformation):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(tileInformation), 0)

def AddTileInformation(builder, tileInformation):
    GameTickPacketAddTileInformation(builder, tileInformation)

def GameTickPacketStartTileInformationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTileInformationVector(builder, numElems):
    return GameTickPacketStartTileInformationVector(builder, numElems)

def GameTickPacketAddTeams(builder, teams):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(teams), 0)

def AddTeams(builder, teams):
    GameTickPacketAddTeams(builder, teams)

def GameTickPacketStartTeamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTeamsVector(builder, numElems):
    return GameTickPacketStartTeamsVector(builder, numElems)

def GameTickPacketEnd(builder):
    return builder.EndObject()

def End(builder):
    return GameTickPacketEnd(builder)

import rlbot.flat.BallInfo
import rlbot.flat.BoostPadState
import rlbot.flat.DropshotTile
import rlbot.flat.GameInfo
import rlbot.flat.PlayerInfo
import rlbot.flat.TeamInfo
try:
    from typing import List, Optional
except:
    pass

class GameTickPacketT(object):

    # GameTickPacketT
    def __init__(self):
        self.players = None  # type: List[rlbot.flat.PlayerInfo.PlayerInfoT]
        self.boostPadStates = None  # type: List[rlbot.flat.BoostPadState.BoostPadStateT]
        self.ball = None  # type: Optional[rlbot.flat.BallInfo.BallInfoT]
        self.gameInfo = None  # type: Optional[rlbot.flat.GameInfo.GameInfoT]
        self.tileInformation = None  # type: List[rlbot.flat.DropshotTile.DropshotTileT]
        self.teams = None  # type: List[rlbot.flat.TeamInfo.TeamInfoT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gameTickPacket = GameTickPacket()
        gameTickPacket.Init(buf, pos)
        return cls.InitFromObj(gameTickPacket)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, gameTickPacket):
        x = GameTickPacketT()
        x._UnPack(gameTickPacket)
        return x

    # GameTickPacketT
    def _UnPack(self, gameTickPacket):
        if gameTickPacket is None:
            return
        if not gameTickPacket.PlayersIsNone():
            self.players = []
            for i in range(gameTickPacket.PlayersLength()):
                if gameTickPacket.Players(i) is None:
                    self.players.append(None)
                else:
                    playerInfo_ = rlbot.flat.PlayerInfo.PlayerInfoT.InitFromObj(gameTickPacket.Players(i))
                    self.players.append(playerInfo_)
        if not gameTickPacket.BoostPadStatesIsNone():
            self.boostPadStates = []
            for i in range(gameTickPacket.BoostPadStatesLength()):
                if gameTickPacket.BoostPadStates(i) is None:
                    self.boostPadStates.append(None)
                else:
                    boostPadState_ = rlbot.flat.BoostPadState.BoostPadStateT.InitFromObj(gameTickPacket.BoostPadStates(i))
                    self.boostPadStates.append(boostPadState_)
        if gameTickPacket.Ball() is not None:
            self.ball = rlbot.flat.BallInfo.BallInfoT.InitFromObj(gameTickPacket.Ball())
        if gameTickPacket.GameInfo() is not None:
            self.gameInfo = rlbot.flat.GameInfo.GameInfoT.InitFromObj(gameTickPacket.GameInfo())
        if not gameTickPacket.TileInformationIsNone():
            self.tileInformation = []
            for i in range(gameTickPacket.TileInformationLength()):
                if gameTickPacket.TileInformation(i) is None:
                    self.tileInformation.append(None)
                else:
                    dropshotTile_ = rlbot.flat.DropshotTile.DropshotTileT.InitFromObj(gameTickPacket.TileInformation(i))
                    self.tileInformation.append(dropshotTile_)
        if not gameTickPacket.TeamsIsNone():
            self.teams = []
            for i in range(gameTickPacket.TeamsLength()):
                if gameTickPacket.Teams(i) is None:
                    self.teams.append(None)
                else:
                    teamInfo_ = rlbot.flat.TeamInfo.TeamInfoT.InitFromObj(gameTickPacket.Teams(i))
                    self.teams.append(teamInfo_)

    # GameTickPacketT
    def Pack(self, builder):
        if self.players is not None:
            playerslist = []
            for i in range(len(self.players)):
                playerslist.append(self.players[i].Pack(builder))
            GameTickPacketStartPlayersVector(builder, len(self.players))
            for i in reversed(range(len(self.players))):
                builder.PrependUOffsetTRelative(playerslist[i])
            players = builder.EndVector()
        if self.boostPadStates is not None:
            boostPadStateslist = []
            for i in range(len(self.boostPadStates)):
                boostPadStateslist.append(self.boostPadStates[i].Pack(builder))
            GameTickPacketStartBoostPadStatesVector(builder, len(self.boostPadStates))
            for i in reversed(range(len(self.boostPadStates))):
                builder.PrependUOffsetTRelative(boostPadStateslist[i])
            boostPadStates = builder.EndVector()
        if self.ball is not None:
            ball = self.ball.Pack(builder)
        if self.gameInfo is not None:
            gameInfo = self.gameInfo.Pack(builder)
        if self.tileInformation is not None:
            tileInformationlist = []
            for i in range(len(self.tileInformation)):
                tileInformationlist.append(self.tileInformation[i].Pack(builder))
            GameTickPacketStartTileInformationVector(builder, len(self.tileInformation))
            for i in reversed(range(len(self.tileInformation))):
                builder.PrependUOffsetTRelative(tileInformationlist[i])
            tileInformation = builder.EndVector()
        if self.teams is not None:
            teamslist = []
            for i in range(len(self.teams)):
                teamslist.append(self.teams[i].Pack(builder))
            GameTickPacketStartTeamsVector(builder, len(self.teams))
            for i in reversed(range(len(self.teams))):
                builder.PrependUOffsetTRelative(teamslist[i])
            teams = builder.EndVector()
        GameTickPacketStart(builder)
        if self.players is not None:
            GameTickPacketAddPlayers(builder, players)
        if self.boostPadStates is not None:
            GameTickPacketAddBoostPadStates(builder, boostPadStates)
        if self.ball is not None:
            GameTickPacketAddBall(builder, ball)
        if self.gameInfo is not None:
            GameTickPacketAddGameInfo(builder, gameInfo)
        if self.tileInformation is not None:
            GameTickPacketAddTileInformation(builder, tileInformation)
        if self.teams is not None:
            GameTickPacketAddTeams(builder, teams)
        gameTickPacket = GameTickPacketEnd(builder)
        return gameTickPacket
