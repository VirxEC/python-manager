# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Physics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Physics()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPhysics(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Physics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Physics
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from rlbot.flat.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Physics
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rlbot.flat.Rotator import Rotator
            obj = Rotator()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Physics
    def Velocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from rlbot.flat.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Physics
    def AngularVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from rlbot.flat.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PhysicsStart(builder):
    builder.StartObject(4)

def Start(builder):
    PhysicsStart(builder)

def PhysicsAddLocation(builder, location):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    PhysicsAddLocation(builder, location)

def PhysicsAddRotation(builder, rotation):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rotation), 0)

def AddRotation(builder, rotation):
    PhysicsAddRotation(builder, rotation)

def PhysicsAddVelocity(builder, velocity):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(velocity), 0)

def AddVelocity(builder, velocity):
    PhysicsAddVelocity(builder, velocity)

def PhysicsAddAngularVelocity(builder, angularVelocity):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(angularVelocity), 0)

def AddAngularVelocity(builder, angularVelocity):
    PhysicsAddAngularVelocity(builder, angularVelocity)

def PhysicsEnd(builder):
    return builder.EndObject()

def End(builder):
    return PhysicsEnd(builder)

import rlbot.flat.Rotator
import rlbot.flat.Vector3
try:
    from typing import Optional
except:
    pass

class PhysicsT(object):

    # PhysicsT
    def __init__(self):
        self.location = None  # type: Optional[rlbot.flat.Vector3.Vector3T]
        self.rotation = None  # type: Optional[rlbot.flat.Rotator.RotatorT]
        self.velocity = None  # type: Optional[rlbot.flat.Vector3.Vector3T]
        self.angularVelocity = None  # type: Optional[rlbot.flat.Vector3.Vector3T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        physics = Physics()
        physics.Init(buf, pos)
        return cls.InitFromObj(physics)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, physics):
        x = PhysicsT()
        x._UnPack(physics)
        return x

    # PhysicsT
    def _UnPack(self, physics):
        if physics is None:
            return
        if physics.Location() is not None:
            self.location = rlbot.flat.Vector3.Vector3T.InitFromObj(physics.Location())
        if physics.Rotation() is not None:
            self.rotation = rlbot.flat.Rotator.RotatorT.InitFromObj(physics.Rotation())
        if physics.Velocity() is not None:
            self.velocity = rlbot.flat.Vector3.Vector3T.InitFromObj(physics.Velocity())
        if physics.AngularVelocity() is not None:
            self.angularVelocity = rlbot.flat.Vector3.Vector3T.InitFromObj(physics.AngularVelocity())

    # PhysicsT
    def Pack(self, builder):
        PhysicsStart(builder)
        if self.location is not None:
            location = self.location.Pack(builder)
            PhysicsAddLocation(builder, location)
        if self.rotation is not None:
            rotation = self.rotation.Pack(builder)
            PhysicsAddRotation(builder, rotation)
        if self.velocity is not None:
            velocity = self.velocity.Pack(builder)
            PhysicsAddVelocity(builder, velocity)
        if self.angularVelocity is not None:
            angularVelocity = self.angularVelocity.Pack(builder)
            PhysicsAddAngularVelocity(builder, angularVelocity)
        physics = PhysicsEnd(builder)
        return physics
