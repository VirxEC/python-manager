# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PlayerConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlayerConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPlayerConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PlayerConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlayerConfiguration
    def VarietyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # PlayerConfiguration
    def Variety(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # PlayerConfiguration
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PlayerConfiguration
    def Team(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerConfiguration
    def Loadout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rlbot.flat.PlayerLoadout import PlayerLoadout
            obj = PlayerLoadout()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # In the case where the requested player index is not available, spawnId will help
    # the framework figure out what index was actually assigned to this player instead.
    # PlayerConfiguration
    def SpawnId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def PlayerConfigurationStart(builder):
    builder.StartObject(6)

def Start(builder):
    PlayerConfigurationStart(builder)

def PlayerConfigurationAddVarietyType(builder, varietyType):
    builder.PrependUint8Slot(0, varietyType, 0)

def AddVarietyType(builder, varietyType):
    PlayerConfigurationAddVarietyType(builder, varietyType)

def PlayerConfigurationAddVariety(builder, variety):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(variety), 0)

def AddVariety(builder, variety):
    PlayerConfigurationAddVariety(builder, variety)

def PlayerConfigurationAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    PlayerConfigurationAddName(builder, name)

def PlayerConfigurationAddTeam(builder, team):
    builder.PrependInt32Slot(3, team, 0)

def AddTeam(builder, team):
    PlayerConfigurationAddTeam(builder, team)

def PlayerConfigurationAddLoadout(builder, loadout):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(loadout), 0)

def AddLoadout(builder, loadout):
    PlayerConfigurationAddLoadout(builder, loadout)

def PlayerConfigurationAddSpawnId(builder, spawnId):
    builder.PrependInt32Slot(5, spawnId, 0)

def AddSpawnId(builder, spawnId):
    PlayerConfigurationAddSpawnId(builder, spawnId)

def PlayerConfigurationEnd(builder):
    return builder.EndObject()

def End(builder):
    return PlayerConfigurationEnd(builder)

import rlbot.flat.HumanPlayer
import rlbot.flat.PartyMemberBotPlayer
import rlbot.flat.PlayerClass
import rlbot.flat.PlayerLoadout
import rlbot.flat.PsyonixBotPlayer
import rlbot.flat.RLBotPlayer
try:
    from typing import Optional, Union
except:
    pass

class PlayerConfigurationT(object):

    # PlayerConfigurationT
    def __init__(self):
        self.varietyType = 0  # type: int
        self.variety = None  # type: Union[None, rlbot.flat.RLBotPlayer.RLBotPlayerT, rlbot.flat.HumanPlayer.HumanPlayerT, rlbot.flat.PsyonixBotPlayer.PsyonixBotPlayerT, rlbot.flat.PartyMemberBotPlayer.PartyMemberBotPlayerT]
        self.name = None  # type: str
        self.team = 0  # type: int
        self.loadout = None  # type: Optional[rlbot.flat.PlayerLoadout.PlayerLoadoutT]
        self.spawnId = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        playerConfiguration = PlayerConfiguration()
        playerConfiguration.Init(buf, pos)
        return cls.InitFromObj(playerConfiguration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, playerConfiguration):
        x = PlayerConfigurationT()
        x._UnPack(playerConfiguration)
        return x

    # PlayerConfigurationT
    def _UnPack(self, playerConfiguration):
        if playerConfiguration is None:
            return
        self.varietyType = playerConfiguration.VarietyType()
        self.variety = rlbot.flat.PlayerClass.PlayerClassCreator(self.varietyType, playerConfiguration.Variety())
        self.name = playerConfiguration.Name()
        self.team = playerConfiguration.Team()
        if playerConfiguration.Loadout() is not None:
            self.loadout = rlbot.flat.PlayerLoadout.PlayerLoadoutT.InitFromObj(playerConfiguration.Loadout())
        self.spawnId = playerConfiguration.SpawnId()

    # PlayerConfigurationT
    def Pack(self, builder):
        if self.variety is not None:
            variety = self.variety.Pack(builder)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.loadout is not None:
            loadout = self.loadout.Pack(builder)
        PlayerConfigurationStart(builder)
        PlayerConfigurationAddVarietyType(builder, self.varietyType)
        if self.variety is not None:
            PlayerConfigurationAddVariety(builder, variety)
        if self.name is not None:
            PlayerConfigurationAddName(builder, name)
        PlayerConfigurationAddTeam(builder, self.team)
        if self.loadout is not None:
            PlayerConfigurationAddLoadout(builder, loadout)
        PlayerConfigurationAddSpawnId(builder, self.spawnId)
        playerConfiguration = PlayerConfigurationEnd(builder)
        return playerConfiguration
