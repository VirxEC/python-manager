# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PlayerInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlayerInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPlayerInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PlayerInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlayerInfo
    def Physics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rlbot.flat.Physics import Physics
            obj = Physics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlayerInfo
    def ScoreInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rlbot.flat.ScoreInfo import ScoreInfo
            obj = ScoreInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlayerInfo
    def IsDemolished(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # True if your wheels are on the ground, the wall, or the ceiling. False if you're midair or turtling.
    # PlayerInfo
    def HasWheelContact(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PlayerInfo
    def IsSupersonic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PlayerInfo
    def IsBot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # True if the player has jumped. Falling off the ceiling / driving off the goal post does not count.
    # PlayerInfo
    def Jumped(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #  True if player has double jumped. False does not mean you have a jump remaining, because the
    #  aerial timer can run out, and that doesn't affect this flag.
    # PlayerInfo
    def DoubleJumped(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PlayerInfo
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PlayerInfo
    def Team(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerInfo
    def Boost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerInfo
    def Hitbox(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rlbot.flat.BoxShape import BoxShape
            obj = BoxShape()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlayerInfo
    def HitboxOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = o + self._tab.Pos
            from rlbot.flat.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # In the case where the requested player index is not available, spawnId will help
    # the framework figure out what index was actually assigned to this player instead.
    # PlayerInfo
    def SpawnId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def PlayerInfoStart(builder):
    builder.StartObject(14)

def Start(builder):
    PlayerInfoStart(builder)

def PlayerInfoAddPhysics(builder, physics):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(physics), 0)

def AddPhysics(builder, physics):
    PlayerInfoAddPhysics(builder, physics)

def PlayerInfoAddScoreInfo(builder, scoreInfo):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(scoreInfo), 0)

def AddScoreInfo(builder, scoreInfo):
    PlayerInfoAddScoreInfo(builder, scoreInfo)

def PlayerInfoAddIsDemolished(builder, isDemolished):
    builder.PrependBoolSlot(2, isDemolished, 0)

def AddIsDemolished(builder, isDemolished):
    PlayerInfoAddIsDemolished(builder, isDemolished)

def PlayerInfoAddHasWheelContact(builder, hasWheelContact):
    builder.PrependBoolSlot(3, hasWheelContact, 0)

def AddHasWheelContact(builder, hasWheelContact):
    PlayerInfoAddHasWheelContact(builder, hasWheelContact)

def PlayerInfoAddIsSupersonic(builder, isSupersonic):
    builder.PrependBoolSlot(4, isSupersonic, 0)

def AddIsSupersonic(builder, isSupersonic):
    PlayerInfoAddIsSupersonic(builder, isSupersonic)

def PlayerInfoAddIsBot(builder, isBot):
    builder.PrependBoolSlot(5, isBot, 0)

def AddIsBot(builder, isBot):
    PlayerInfoAddIsBot(builder, isBot)

def PlayerInfoAddJumped(builder, jumped):
    builder.PrependBoolSlot(6, jumped, 0)

def AddJumped(builder, jumped):
    PlayerInfoAddJumped(builder, jumped)

def PlayerInfoAddDoubleJumped(builder, doubleJumped):
    builder.PrependBoolSlot(7, doubleJumped, 0)

def AddDoubleJumped(builder, doubleJumped):
    PlayerInfoAddDoubleJumped(builder, doubleJumped)

def PlayerInfoAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    PlayerInfoAddName(builder, name)

def PlayerInfoAddTeam(builder, team):
    builder.PrependInt32Slot(9, team, 0)

def AddTeam(builder, team):
    PlayerInfoAddTeam(builder, team)

def PlayerInfoAddBoost(builder, boost):
    builder.PrependInt32Slot(10, boost, 0)

def AddBoost(builder, boost):
    PlayerInfoAddBoost(builder, boost)

def PlayerInfoAddHitbox(builder, hitbox):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(hitbox), 0)

def AddHitbox(builder, hitbox):
    PlayerInfoAddHitbox(builder, hitbox)

def PlayerInfoAddHitboxOffset(builder, hitboxOffset):
    builder.PrependStructSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(hitboxOffset), 0)

def AddHitboxOffset(builder, hitboxOffset):
    PlayerInfoAddHitboxOffset(builder, hitboxOffset)

def PlayerInfoAddSpawnId(builder, spawnId):
    builder.PrependInt32Slot(13, spawnId, 0)

def AddSpawnId(builder, spawnId):
    PlayerInfoAddSpawnId(builder, spawnId)

def PlayerInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return PlayerInfoEnd(builder)

import rlbot.flat.BoxShape
import rlbot.flat.Physics
import rlbot.flat.ScoreInfo
import rlbot.flat.Vector3
try:
    from typing import Optional
except:
    pass

class PlayerInfoT(object):

    # PlayerInfoT
    def __init__(self):
        self.physics = None  # type: Optional[rlbot.flat.Physics.PhysicsT]
        self.scoreInfo = None  # type: Optional[rlbot.flat.ScoreInfo.ScoreInfoT]
        self.isDemolished = False  # type: bool
        self.hasWheelContact = False  # type: bool
        self.isSupersonic = False  # type: bool
        self.isBot = False  # type: bool
        self.jumped = False  # type: bool
        self.doubleJumped = False  # type: bool
        self.name = None  # type: str
        self.team = 0  # type: int
        self.boost = 0  # type: int
        self.hitbox = None  # type: Optional[rlbot.flat.BoxShape.BoxShapeT]
        self.hitboxOffset = None  # type: Optional[rlbot.flat.Vector3.Vector3T]
        self.spawnId = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        playerInfo = PlayerInfo()
        playerInfo.Init(buf, pos)
        return cls.InitFromObj(playerInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, playerInfo):
        x = PlayerInfoT()
        x._UnPack(playerInfo)
        return x

    # PlayerInfoT
    def _UnPack(self, playerInfo):
        if playerInfo is None:
            return
        if playerInfo.Physics() is not None:
            self.physics = rlbot.flat.Physics.PhysicsT.InitFromObj(playerInfo.Physics())
        if playerInfo.ScoreInfo() is not None:
            self.scoreInfo = rlbot.flat.ScoreInfo.ScoreInfoT.InitFromObj(playerInfo.ScoreInfo())
        self.isDemolished = playerInfo.IsDemolished()
        self.hasWheelContact = playerInfo.HasWheelContact()
        self.isSupersonic = playerInfo.IsSupersonic()
        self.isBot = playerInfo.IsBot()
        self.jumped = playerInfo.Jumped()
        self.doubleJumped = playerInfo.DoubleJumped()
        self.name = playerInfo.Name()
        self.team = playerInfo.Team()
        self.boost = playerInfo.Boost()
        if playerInfo.Hitbox() is not None:
            self.hitbox = rlbot.flat.BoxShape.BoxShapeT.InitFromObj(playerInfo.Hitbox())
        if playerInfo.HitboxOffset() is not None:
            self.hitboxOffset = rlbot.flat.Vector3.Vector3T.InitFromObj(playerInfo.HitboxOffset())
        self.spawnId = playerInfo.SpawnId()

    # PlayerInfoT
    def Pack(self, builder):
        if self.physics is not None:
            physics = self.physics.Pack(builder)
        if self.scoreInfo is not None:
            scoreInfo = self.scoreInfo.Pack(builder)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.hitbox is not None:
            hitbox = self.hitbox.Pack(builder)
        PlayerInfoStart(builder)
        if self.physics is not None:
            PlayerInfoAddPhysics(builder, physics)
        if self.scoreInfo is not None:
            PlayerInfoAddScoreInfo(builder, scoreInfo)
        PlayerInfoAddIsDemolished(builder, self.isDemolished)
        PlayerInfoAddHasWheelContact(builder, self.hasWheelContact)
        PlayerInfoAddIsSupersonic(builder, self.isSupersonic)
        PlayerInfoAddIsBot(builder, self.isBot)
        PlayerInfoAddJumped(builder, self.jumped)
        PlayerInfoAddDoubleJumped(builder, self.doubleJumped)
        if self.name is not None:
            PlayerInfoAddName(builder, name)
        PlayerInfoAddTeam(builder, self.team)
        PlayerInfoAddBoost(builder, self.boost)
        if self.hitbox is not None:
            PlayerInfoAddHitbox(builder, hitbox)
        if self.hitboxOffset is not None:
            hitboxOffset = self.hitboxOffset.Pack(builder)
            PlayerInfoAddHitboxOffset(builder, hitboxOffset)
        PlayerInfoAddSpawnId(builder, self.spawnId)
        playerInfo = PlayerInfoEnd(builder)
        return playerInfo
