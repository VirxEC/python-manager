# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# The car type, color, and other aspects of the player's appearance.
# See https://github.com/RLBot/RLBot/wiki/Bot-Customization
class PlayerLoadout(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlayerLoadout()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPlayerLoadout(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PlayerLoadout
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlayerLoadout
    def TeamColorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def CustomColorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def CarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def DecalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def WheelsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def BoostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def AntennaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def HatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def PaintFinishId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def CustomFinishId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def EngineAudioId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def TrailsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def GoalExplosionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlayerLoadout
    def LoadoutPaint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rlbot.flat.LoadoutPaint import LoadoutPaint
            obj = LoadoutPaint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Sets the primary color of the car to the swatch that most closely matches the provided
    # RGB color value. If set, this overrides teamColorId.
    # PlayerLoadout
    def PrimaryColorLookup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rlbot.flat.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Sets the secondary color of the car to the swatch that most closely matches the provided
    # RGB color value. If set, this overrides customColorId.
    # PlayerLoadout
    def SecondaryColorLookup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rlbot.flat.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PlayerLoadoutStart(builder):
    builder.StartObject(16)

def Start(builder):
    PlayerLoadoutStart(builder)

def PlayerLoadoutAddTeamColorId(builder, teamColorId):
    builder.PrependInt32Slot(0, teamColorId, 0)

def AddTeamColorId(builder, teamColorId):
    PlayerLoadoutAddTeamColorId(builder, teamColorId)

def PlayerLoadoutAddCustomColorId(builder, customColorId):
    builder.PrependInt32Slot(1, customColorId, 0)

def AddCustomColorId(builder, customColorId):
    PlayerLoadoutAddCustomColorId(builder, customColorId)

def PlayerLoadoutAddCarId(builder, carId):
    builder.PrependInt32Slot(2, carId, 0)

def AddCarId(builder, carId):
    PlayerLoadoutAddCarId(builder, carId)

def PlayerLoadoutAddDecalId(builder, decalId):
    builder.PrependInt32Slot(3, decalId, 0)

def AddDecalId(builder, decalId):
    PlayerLoadoutAddDecalId(builder, decalId)

def PlayerLoadoutAddWheelsId(builder, wheelsId):
    builder.PrependInt32Slot(4, wheelsId, 0)

def AddWheelsId(builder, wheelsId):
    PlayerLoadoutAddWheelsId(builder, wheelsId)

def PlayerLoadoutAddBoostId(builder, boostId):
    builder.PrependInt32Slot(5, boostId, 0)

def AddBoostId(builder, boostId):
    PlayerLoadoutAddBoostId(builder, boostId)

def PlayerLoadoutAddAntennaId(builder, antennaId):
    builder.PrependInt32Slot(6, antennaId, 0)

def AddAntennaId(builder, antennaId):
    PlayerLoadoutAddAntennaId(builder, antennaId)

def PlayerLoadoutAddHatId(builder, hatId):
    builder.PrependInt32Slot(7, hatId, 0)

def AddHatId(builder, hatId):
    PlayerLoadoutAddHatId(builder, hatId)

def PlayerLoadoutAddPaintFinishId(builder, paintFinishId):
    builder.PrependInt32Slot(8, paintFinishId, 0)

def AddPaintFinishId(builder, paintFinishId):
    PlayerLoadoutAddPaintFinishId(builder, paintFinishId)

def PlayerLoadoutAddCustomFinishId(builder, customFinishId):
    builder.PrependInt32Slot(9, customFinishId, 0)

def AddCustomFinishId(builder, customFinishId):
    PlayerLoadoutAddCustomFinishId(builder, customFinishId)

def PlayerLoadoutAddEngineAudioId(builder, engineAudioId):
    builder.PrependInt32Slot(10, engineAudioId, 0)

def AddEngineAudioId(builder, engineAudioId):
    PlayerLoadoutAddEngineAudioId(builder, engineAudioId)

def PlayerLoadoutAddTrailsId(builder, trailsId):
    builder.PrependInt32Slot(11, trailsId, 0)

def AddTrailsId(builder, trailsId):
    PlayerLoadoutAddTrailsId(builder, trailsId)

def PlayerLoadoutAddGoalExplosionId(builder, goalExplosionId):
    builder.PrependInt32Slot(12, goalExplosionId, 0)

def AddGoalExplosionId(builder, goalExplosionId):
    PlayerLoadoutAddGoalExplosionId(builder, goalExplosionId)

def PlayerLoadoutAddLoadoutPaint(builder, loadoutPaint):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(loadoutPaint), 0)

def AddLoadoutPaint(builder, loadoutPaint):
    PlayerLoadoutAddLoadoutPaint(builder, loadoutPaint)

def PlayerLoadoutAddPrimaryColorLookup(builder, primaryColorLookup):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(primaryColorLookup), 0)

def AddPrimaryColorLookup(builder, primaryColorLookup):
    PlayerLoadoutAddPrimaryColorLookup(builder, primaryColorLookup)

def PlayerLoadoutAddSecondaryColorLookup(builder, secondaryColorLookup):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(secondaryColorLookup), 0)

def AddSecondaryColorLookup(builder, secondaryColorLookup):
    PlayerLoadoutAddSecondaryColorLookup(builder, secondaryColorLookup)

def PlayerLoadoutEnd(builder):
    return builder.EndObject()

def End(builder):
    return PlayerLoadoutEnd(builder)

import rlbot.flat.Color
import rlbot.flat.LoadoutPaint
try:
    from typing import Optional
except:
    pass

class PlayerLoadoutT(object):

    # PlayerLoadoutT
    def __init__(self):
        self.teamColorId = 0  # type: int
        self.customColorId = 0  # type: int
        self.carId = 0  # type: int
        self.decalId = 0  # type: int
        self.wheelsId = 0  # type: int
        self.boostId = 0  # type: int
        self.antennaId = 0  # type: int
        self.hatId = 0  # type: int
        self.paintFinishId = 0  # type: int
        self.customFinishId = 0  # type: int
        self.engineAudioId = 0  # type: int
        self.trailsId = 0  # type: int
        self.goalExplosionId = 0  # type: int
        self.loadoutPaint = None  # type: Optional[rlbot.flat.LoadoutPaint.LoadoutPaintT]
        self.primaryColorLookup = None  # type: Optional[rlbot.flat.Color.ColorT]
        self.secondaryColorLookup = None  # type: Optional[rlbot.flat.Color.ColorT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        playerLoadout = PlayerLoadout()
        playerLoadout.Init(buf, pos)
        return cls.InitFromObj(playerLoadout)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, playerLoadout):
        x = PlayerLoadoutT()
        x._UnPack(playerLoadout)
        return x

    # PlayerLoadoutT
    def _UnPack(self, playerLoadout):
        if playerLoadout is None:
            return
        self.teamColorId = playerLoadout.TeamColorId()
        self.customColorId = playerLoadout.CustomColorId()
        self.carId = playerLoadout.CarId()
        self.decalId = playerLoadout.DecalId()
        self.wheelsId = playerLoadout.WheelsId()
        self.boostId = playerLoadout.BoostId()
        self.antennaId = playerLoadout.AntennaId()
        self.hatId = playerLoadout.HatId()
        self.paintFinishId = playerLoadout.PaintFinishId()
        self.customFinishId = playerLoadout.CustomFinishId()
        self.engineAudioId = playerLoadout.EngineAudioId()
        self.trailsId = playerLoadout.TrailsId()
        self.goalExplosionId = playerLoadout.GoalExplosionId()
        if playerLoadout.LoadoutPaint() is not None:
            self.loadoutPaint = rlbot.flat.LoadoutPaint.LoadoutPaintT.InitFromObj(playerLoadout.LoadoutPaint())
        if playerLoadout.PrimaryColorLookup() is not None:
            self.primaryColorLookup = rlbot.flat.Color.ColorT.InitFromObj(playerLoadout.PrimaryColorLookup())
        if playerLoadout.SecondaryColorLookup() is not None:
            self.secondaryColorLookup = rlbot.flat.Color.ColorT.InitFromObj(playerLoadout.SecondaryColorLookup())

    # PlayerLoadoutT
    def Pack(self, builder):
        if self.loadoutPaint is not None:
            loadoutPaint = self.loadoutPaint.Pack(builder)
        if self.primaryColorLookup is not None:
            primaryColorLookup = self.primaryColorLookup.Pack(builder)
        if self.secondaryColorLookup is not None:
            secondaryColorLookup = self.secondaryColorLookup.Pack(builder)
        PlayerLoadoutStart(builder)
        PlayerLoadoutAddTeamColorId(builder, self.teamColorId)
        PlayerLoadoutAddCustomColorId(builder, self.customColorId)
        PlayerLoadoutAddCarId(builder, self.carId)
        PlayerLoadoutAddDecalId(builder, self.decalId)
        PlayerLoadoutAddWheelsId(builder, self.wheelsId)
        PlayerLoadoutAddBoostId(builder, self.boostId)
        PlayerLoadoutAddAntennaId(builder, self.antennaId)
        PlayerLoadoutAddHatId(builder, self.hatId)
        PlayerLoadoutAddPaintFinishId(builder, self.paintFinishId)
        PlayerLoadoutAddCustomFinishId(builder, self.customFinishId)
        PlayerLoadoutAddEngineAudioId(builder, self.engineAudioId)
        PlayerLoadoutAddTrailsId(builder, self.trailsId)
        PlayerLoadoutAddGoalExplosionId(builder, self.goalExplosionId)
        if self.loadoutPaint is not None:
            PlayerLoadoutAddLoadoutPaint(builder, loadoutPaint)
        if self.primaryColorLookup is not None:
            PlayerLoadoutAddPrimaryColorLookup(builder, primaryColorLookup)
        if self.secondaryColorLookup is not None:
            PlayerLoadoutAddSecondaryColorLookup(builder, secondaryColorLookup)
        playerLoadout = PlayerLoadoutEnd(builder)
        return playerLoadout
