# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Sent when connecting to RLBot to indicate what type of messages are desired.
# This could be sent by a bot, or a bot manager governing several bots, an
# overlay, or any other utility that connects to the RLBot process.
class ReadyMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReadyMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReadyMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReadyMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReadyMessage
    def WantsBallPredictions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ReadyMessage
    def WantsQuickChat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ReadyMessage
    def WantsGameMessages(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ReadyMessageStart(builder):
    builder.StartObject(3)

def Start(builder):
    ReadyMessageStart(builder)

def ReadyMessageAddWantsBallPredictions(builder, wantsBallPredictions):
    builder.PrependBoolSlot(0, wantsBallPredictions, 0)

def AddWantsBallPredictions(builder, wantsBallPredictions):
    ReadyMessageAddWantsBallPredictions(builder, wantsBallPredictions)

def ReadyMessageAddWantsQuickChat(builder, wantsQuickChat):
    builder.PrependBoolSlot(1, wantsQuickChat, 0)

def AddWantsQuickChat(builder, wantsQuickChat):
    ReadyMessageAddWantsQuickChat(builder, wantsQuickChat)

def ReadyMessageAddWantsGameMessages(builder, wantsGameMessages):
    builder.PrependBoolSlot(2, wantsGameMessages, 0)

def AddWantsGameMessages(builder, wantsGameMessages):
    ReadyMessageAddWantsGameMessages(builder, wantsGameMessages)

def ReadyMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return ReadyMessageEnd(builder)


class ReadyMessageT(object):

    # ReadyMessageT
    def __init__(self):
        self.wantsBallPredictions = False  # type: bool
        self.wantsQuickChat = False  # type: bool
        self.wantsGameMessages = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        readyMessage = ReadyMessage()
        readyMessage.Init(buf, pos)
        return cls.InitFromObj(readyMessage)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, readyMessage):
        x = ReadyMessageT()
        x._UnPack(readyMessage)
        return x

    # ReadyMessageT
    def _UnPack(self, readyMessage):
        if readyMessage is None:
            return
        self.wantsBallPredictions = readyMessage.WantsBallPredictions()
        self.wantsQuickChat = readyMessage.WantsQuickChat()
        self.wantsGameMessages = readyMessage.WantsGameMessages()

    # ReadyMessageT
    def Pack(self, builder):
        ReadyMessageStart(builder)
        ReadyMessageAddWantsBallPredictions(builder, self.wantsBallPredictions)
        ReadyMessageAddWantsQuickChat(builder, self.wantsQuickChat)
        ReadyMessageAddWantsGameMessages(builder, self.wantsGameMessages)
        readyMessage = ReadyMessageEnd(builder)
        return readyMessage
