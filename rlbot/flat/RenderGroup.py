# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RenderGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RenderGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRenderGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RenderGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RenderGroup
    def RenderMessages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from rlbot.flat.RenderMessage import RenderMessage
            obj = RenderMessage()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RenderGroup
    def RenderMessagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RenderGroup
    def RenderMessagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # The id of the render group
    # RenderGroup
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def RenderGroupStart(builder):
    builder.StartObject(2)

def Start(builder):
    RenderGroupStart(builder)

def RenderGroupAddRenderMessages(builder, renderMessages):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(renderMessages), 0)

def AddRenderMessages(builder, renderMessages):
    RenderGroupAddRenderMessages(builder, renderMessages)

def RenderGroupStartRenderMessagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRenderMessagesVector(builder, numElems):
    return RenderGroupStartRenderMessagesVector(builder, numElems)

def RenderGroupAddId(builder, id):
    builder.PrependInt32Slot(1, id, 0)

def AddId(builder, id):
    RenderGroupAddId(builder, id)

def RenderGroupEnd(builder):
    return builder.EndObject()

def End(builder):
    return RenderGroupEnd(builder)

import rlbot.flat.RenderMessage
try:
    from typing import List
except:
    pass

class RenderGroupT(object):

    # RenderGroupT
    def __init__(self):
        self.renderMessages = None  # type: List[rlbot.flat.RenderMessage.RenderMessageT]
        self.id = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        renderGroup = RenderGroup()
        renderGroup.Init(buf, pos)
        return cls.InitFromObj(renderGroup)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, renderGroup):
        x = RenderGroupT()
        x._UnPack(renderGroup)
        return x

    # RenderGroupT
    def _UnPack(self, renderGroup):
        if renderGroup is None:
            return
        if not renderGroup.RenderMessagesIsNone():
            self.renderMessages = []
            for i in range(renderGroup.RenderMessagesLength()):
                if renderGroup.RenderMessages(i) is None:
                    self.renderMessages.append(None)
                else:
                    renderMessage_ = rlbot.flat.RenderMessage.RenderMessageT.InitFromObj(renderGroup.RenderMessages(i))
                    self.renderMessages.append(renderMessage_)
        self.id = renderGroup.Id()

    # RenderGroupT
    def Pack(self, builder):
        if self.renderMessages is not None:
            renderMessageslist = []
            for i in range(len(self.renderMessages)):
                renderMessageslist.append(self.renderMessages[i].Pack(builder))
            RenderGroupStartRenderMessagesVector(builder, len(self.renderMessages))
            for i in reversed(range(len(self.renderMessages))):
                builder.PrependUOffsetTRelative(renderMessageslist[i])
            renderMessages = builder.EndVector()
        RenderGroupStart(builder)
        if self.renderMessages is not None:
            RenderGroupAddRenderMessages(builder, renderMessages)
        RenderGroupAddId(builder, self.id)
        renderGroup = RenderGroupEnd(builder)
        return renderGroup
