# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScoreInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScoreInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScoreInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScoreInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScoreInfo
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScoreInfo
    def Goals(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScoreInfo
    def OwnGoals(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScoreInfo
    def Assists(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScoreInfo
    def Saves(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScoreInfo
    def Shots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScoreInfo
    def Demolitions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ScoreInfoStart(builder):
    builder.StartObject(7)

def Start(builder):
    ScoreInfoStart(builder)

def ScoreInfoAddScore(builder, score):
    builder.PrependInt32Slot(0, score, 0)

def AddScore(builder, score):
    ScoreInfoAddScore(builder, score)

def ScoreInfoAddGoals(builder, goals):
    builder.PrependInt32Slot(1, goals, 0)

def AddGoals(builder, goals):
    ScoreInfoAddGoals(builder, goals)

def ScoreInfoAddOwnGoals(builder, ownGoals):
    builder.PrependInt32Slot(2, ownGoals, 0)

def AddOwnGoals(builder, ownGoals):
    ScoreInfoAddOwnGoals(builder, ownGoals)

def ScoreInfoAddAssists(builder, assists):
    builder.PrependInt32Slot(3, assists, 0)

def AddAssists(builder, assists):
    ScoreInfoAddAssists(builder, assists)

def ScoreInfoAddSaves(builder, saves):
    builder.PrependInt32Slot(4, saves, 0)

def AddSaves(builder, saves):
    ScoreInfoAddSaves(builder, saves)

def ScoreInfoAddShots(builder, shots):
    builder.PrependInt32Slot(5, shots, 0)

def AddShots(builder, shots):
    ScoreInfoAddShots(builder, shots)

def ScoreInfoAddDemolitions(builder, demolitions):
    builder.PrependInt32Slot(6, demolitions, 0)

def AddDemolitions(builder, demolitions):
    ScoreInfoAddDemolitions(builder, demolitions)

def ScoreInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return ScoreInfoEnd(builder)


class ScoreInfoT(object):

    # ScoreInfoT
    def __init__(self):
        self.score = 0  # type: int
        self.goals = 0  # type: int
        self.ownGoals = 0  # type: int
        self.assists = 0  # type: int
        self.saves = 0  # type: int
        self.shots = 0  # type: int
        self.demolitions = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        scoreInfo = ScoreInfo()
        scoreInfo.Init(buf, pos)
        return cls.InitFromObj(scoreInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, scoreInfo):
        x = ScoreInfoT()
        x._UnPack(scoreInfo)
        return x

    # ScoreInfoT
    def _UnPack(self, scoreInfo):
        if scoreInfo is None:
            return
        self.score = scoreInfo.Score()
        self.goals = scoreInfo.Goals()
        self.ownGoals = scoreInfo.OwnGoals()
        self.assists = scoreInfo.Assists()
        self.saves = scoreInfo.Saves()
        self.shots = scoreInfo.Shots()
        self.demolitions = scoreInfo.Demolitions()

    # ScoreInfoT
    def Pack(self, builder):
        ScoreInfoStart(builder)
        ScoreInfoAddScore(builder, self.score)
        ScoreInfoAddGoals(builder, self.goals)
        ScoreInfoAddOwnGoals(builder, self.ownGoals)
        ScoreInfoAddAssists(builder, self.assists)
        ScoreInfoAddSaves(builder, self.saves)
        ScoreInfoAddShots(builder, self.shots)
        ScoreInfoAddDemolitions(builder, self.demolitions)
        scoreInfo = ScoreInfoEnd(builder)
        return scoreInfo
