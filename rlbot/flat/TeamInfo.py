# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TeamInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TeamInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTeamInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TeamInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TeamInfo
    def TeamIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # number of goals scored.
    # TeamInfo
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def TeamInfoStart(builder):
    builder.StartObject(2)

def Start(builder):
    TeamInfoStart(builder)

def TeamInfoAddTeamIndex(builder, teamIndex):
    builder.PrependInt32Slot(0, teamIndex, 0)

def AddTeamIndex(builder, teamIndex):
    TeamInfoAddTeamIndex(builder, teamIndex)

def TeamInfoAddScore(builder, score):
    builder.PrependInt32Slot(1, score, 0)

def AddScore(builder, score):
    TeamInfoAddScore(builder, score)

def TeamInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return TeamInfoEnd(builder)


class TeamInfoT(object):

    # TeamInfoT
    def __init__(self):
        self.teamIndex = 0  # type: int
        self.score = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        teamInfo = TeamInfo()
        teamInfo.Init(buf, pos)
        return cls.InitFromObj(teamInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, teamInfo):
        x = TeamInfoT()
        x._UnPack(teamInfo)
        return x

    # TeamInfoT
    def _UnPack(self, teamInfo):
        if teamInfo is None:
            return
        self.teamIndex = teamInfo.TeamIndex()
        self.score = teamInfo.Score()

    # TeamInfoT
    def Pack(self, builder):
        TeamInfoStart(builder)
        TeamInfoAddTeamIndex(builder, self.teamIndex)
        TeamInfoAddScore(builder, self.score)
        teamInfo = TeamInfoEnd(builder)
        return teamInfo
