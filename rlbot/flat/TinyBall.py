# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A minimal version of the ball, useful when bandwidth needs to be conserved.
class TinyBall(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TinyBall()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTinyBall(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TinyBall
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TinyBall
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from rlbot.flat.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TinyBall
    def Velocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rlbot.flat.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TinyBallStart(builder):
    builder.StartObject(2)

def Start(builder):
    TinyBallStart(builder)

def TinyBallAddLocation(builder, location):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    TinyBallAddLocation(builder, location)

def TinyBallAddVelocity(builder, velocity):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(velocity), 0)

def AddVelocity(builder, velocity):
    TinyBallAddVelocity(builder, velocity)

def TinyBallEnd(builder):
    return builder.EndObject()

def End(builder):
    return TinyBallEnd(builder)

import rlbot.flat.Vector3
try:
    from typing import Optional
except:
    pass

class TinyBallT(object):

    # TinyBallT
    def __init__(self):
        self.location = None  # type: Optional[rlbot.flat.Vector3.Vector3T]
        self.velocity = None  # type: Optional[rlbot.flat.Vector3.Vector3T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tinyBall = TinyBall()
        tinyBall.Init(buf, pos)
        return cls.InitFromObj(tinyBall)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, tinyBall):
        x = TinyBallT()
        x._UnPack(tinyBall)
        return x

    # TinyBallT
    def _UnPack(self, tinyBall):
        if tinyBall is None:
            return
        if tinyBall.Location() is not None:
            self.location = rlbot.flat.Vector3.Vector3T.InitFromObj(tinyBall.Location())
        if tinyBall.Velocity() is not None:
            self.velocity = rlbot.flat.Vector3.Vector3T.InitFromObj(tinyBall.Velocity())

    # TinyBallT
    def Pack(self, builder):
        TinyBallStart(builder)
        if self.location is not None:
            location = self.location.Pack(builder)
            TinyBallAddLocation(builder, location)
        if self.velocity is not None:
            velocity = self.velocity.Pack(builder)
            TinyBallAddVelocity(builder, velocity)
        tinyBall = TinyBallEnd(builder)
        return tinyBall
